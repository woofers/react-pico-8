{"version":3,"sources":["copy.js","code-block.js","code.js","checkbox.js","drag-list.js","button.js","mount-button.js","app.js","index.js"],"names":["icon","css","Copy","p","text","value","type","title","aria-hidden","faCopy","defaultProps","code","copy","CodeBlock","lang","language","toLowerCase","children","component","className","spaces","indent","repeat","autoPlay","legacyButtons","hideCursor","center","blockKeys","usePointer","unpauseOnReset","buttons","enabled","filter","defaultImports","length","names","map","name","join","imports","items","tags","withStyles","root","color","grey","padding","disabled","Checkbox","check","iconSize","background","align","DragList","onDragEnd","result","destination","setItems","list","startIndex","endIndex","Array","from","splice","removed","reorder","source","index","droppableId","provided","snapshot","ref","innerRef","pair","Button","id","label","dragable","selected","key","isDragDisabled","draggableId","draggableProps","dragHandleProps","style","isDragging","draggableStyle","listStyle","checked","onChange","concat","toggle","htmlFor","placeholder","normal","useStyles","makeStyles","theme","button","margin","spacing","width","borderColor","backgroundColor","input","display","classes","variant","onClick","mounted","span","Option","App","font","desc","page","form","link","heading","live","usage","useState","setAutoPlay","setLegacyButtons","setHideCursor","setCenter","setBlockKeys","isMounted","setMounted","setPointer","setUnpauseOnReset","picoButtons","setButtons","props","styles","src","href","height","alt","codeDemo","Object","values","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c08fd19d.chunk.js","sourcesContent":["/** @jsx jsx */\nimport { jsx, css } from '@emotion/core'\nimport { CopyToClipboard } from 'react-copy-to-clipboard'\nimport { FontAwesomeIcon as Icon } from '@fortawesome/react-fontawesome'\nimport { faCopy } from '@fortawesome/free-solid-svg-icons'\n\nconst icon = css`\n  font-size: 20px;\n  background: none;\n  border: none;\n  cursor: pointer;\n  color: #64605d;\n  &:hover {\n    color: #ccc;\n  }\n`\n\nconst Copy = p => (\n  <CopyToClipboard text={p.value} css={icon}>\n    <button type=\"button\" title=\"Copy to clipboard\">\n      <Icon aria-hidden={false} icon={faCopy} />\n    </button>\n  </CopyToClipboard>\n)\n\nCopy.defaultProps = {\n  value: 'Copied from button'\n}\n\nexport default Copy\n","/** @jsx jsx */\nimport { jsx, css } from '@emotion/core'\nimport PrismCode from 'react-prism'\nimport 'prismjs'\nimport 'prismjs/components/prism-jsx.min'\nimport 'prism-themes/themes/prism-dracula.css'\nimport Copy from './copy'\n\nconst code = css`\n  position: relative;\n  width: 600px;\n  div {\n    background: #191919;\n    border-radius: 0.3em;\n  }\n  pre {\n    background: none;\n    margin-left: 20px;\n    padding: 0;\n    padding-bottom: 25px;\n    span[class*=\"class-name\"] {\n      color: #ff79c6;\n    }\n  }\n  span, code, pre {\n    font-family: 'Inconsolata', monospace;\n  }\n  span[class*=\"boolean\"],\n  span[class*=\"string\"],\n  span[class*=\"attr-value\"] {\n    font-weight: 700;\n  }\n`\n\nconst copy = css`\n  position: absolute;\n  right: 10px;\n  top: 10px;\n`\n\nconst CodeBlock = p => {\n  let lang = p.language || ''\n  lang = lang.toLowerCase()\n  return (\n    <div css={code}>\n      <span css={copy}><Copy value={p.children} /></span>\n      <div>\n        <PrismCode component=\"pre\" className={`language-${lang}`}>\n          {p.children}\n        </PrismCode>\n      </div>\n    </div>\n  )\n}\n\nexport default CodeBlock\n","const spaces = indent => {\n  const tab = 2\n  return ' '.repeat(tab * indent)\n}\n\nconst tags = buttons => {\n  if (buttons.length === 0) return '/>'\n  const items = buttons.map(({ name }) => `${spaces(2)}<${name}/>`).join('\\n')\n  return `>\n${items}\n  </Pico8>`\n}\n\nconst imports = buttons => {\n  const defaultImports = `\nimport React from 'react'\nimport Pico8 from 'react-pico-8'`\n\n  if (buttons.length === 0) return defaultImports\n  const names = buttons.map(({ name }) => name).join(`,\\n${spaces(4)} `)\n  return `${defaultImports}\nimport { ${names} } from 'react-pico-8/buttons'`\n}\n\nconst code = (\n  autoPlay, legacyButtons, hideCursor,\n  center, blockKeys, usePointer, unpauseOnReset, buttons\n) => {\n  const enabled = buttons.filter(({ enabled }) => enabled)\n  return `${imports(enabled)}\n\nconst App = () => (\n  <Pico8 src=\"index.js\"\n         autoPlay={${autoPlay}}\n         legacyButtons={${legacyButtons}}\n         hideCursor={${hideCursor}}\n         center={${center}}\n         blockKeys={${blockKeys}}\n         usePointer={${usePointer}}\n         unpauseOnReset={${unpauseOnReset}}\n         placeholder=\"placeholder.png\"\n  ${tags(enabled)}\n)`\n}\n\nexport default code\n","\nimport React from 'react'\nimport Checkbox from '@material-ui/core/Checkbox'\nimport { withStyles } from '@material-ui/core/styles'\nimport { grey } from '@material-ui/core/colors'\n\nexport default withStyles({\n  root: {\n    color: grey[100],\n    padding: '6px',\n  },\n  disabled: {\n    color: '#3c3a3a !important'\n  },\n})(p => <Checkbox color=\"default\" {...p} />)\n","/** @jsx jsx */\nimport { jsx, css } from '@emotion/core'\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\"\nimport Box from './checkbox'\n\n// Adapted from https://codesandbox.io/s/4qp6vjp319?from-embed\n\nconst indent = css`\n  margin: 0;\n  padding: 0;\n  list-style: none;\n`\n\nconst check = css`\n  margin-left: 24px;\n  margin-right: 8px;\n`\n\nconst iconSize = css`\n  display: inline-flex;\n  min-width: 56px;\n  flex-shrink: 0;\n`\n\nconst background = css`\n  color: #fff;\n  max-width: 350px;\n`\n\nconst align = css`\n  display: flex;\n  justify-content: flex-start;\n  align-items: center;\n  padding-top: 8px;\n  padding-bottom: 8px;\n`\n\nconst reorder = (list, startIndex, endIndex) => {\n  const result = Array.from(list)\n  const [removed] = result.splice(startIndex, 1)\n  result.splice(endIndex, 0, removed)\n  return result\n}\n\nconst getItemStyle = (isDragging, draggableStyle) => ({\n  listStyle: 'none',\n  ...draggableStyle,\n  ...(isDragging && {\n    background: \"#313131\"\n  })\n})\n\nconst DragList = p => {\n  const onDragEnd = (result) => {\n    if (!result.destination) return\n    p.setItems(items => {\n      return reorder(\n        items,\n        result.source.index,\n        result.destination.index\n      )\n    })\n  }\n  const toggle = index => {\n    p.setItems(items => {\n      let [removed] = items.splice(index, 1)\n      removed.enabled = !removed.enabled\n      items.splice(index, 0, removed)\n      return items.concat([])\n    })\n  }\n  return (\n    <form css={background}>\n      <fieldset>\n        <legend>{p.children}</legend>\n        <DragDropContext onDragEnd={onDragEnd}>\n          <Droppable droppableId=\"droppable\">\n            {(provided, snapshot) => (\n              <div ref={provided.innerRef}>\n                <ul css={indent}>\n                  {p.items.map((pair, index) => {\n                    const { name, Button } = pair\n                    const id = `icon-${name}`\n                    const label = name.toLowerCase()\n                    const dragable = css`\n                      div {\n                        cursor: ${p.disabled ? 'auto' : 'grab'} !important;\n                      }\n                    `\n                    const icon = <span css={dragable}><Button selected={pair.enabled} disabled={true} /></span>\n                    return (\n                      <Draggable key={id} isDragDisabled={p.disabled} draggableId={id} index={index}>\n                        {(provided, snapshot) => (\n                          <li\n                            ref={provided.innerRef}\n                            {...provided.draggableProps}\n                            {...provided.dragHandleProps}\n                            style={getItemStyle(\n                              snapshot.isDragging,\n                              provided.draggableProps.style\n                            )}\n                          >\n                            <div css={align}>\n                              <Box id={label} disabled={p.disabled} css={check} checked={pair.enabled} onChange={() => toggle(index)} />\n                              <div css={iconSize} aria-hidden=\"true\">{icon}</div>\n                              <label htmlFor={label}>{name}</label>\n                            </div>\n                          </li>\n                        )}\n                      </Draggable>\n                    )})}\n                    {provided.placeholder}\n                </ul>\n              </div>\n            )}\n          </Droppable>\n        </DragDropContext>\n      </fieldset>\n    </form>\n  )\n}\n\nexport default DragList\n","import React from 'react'\nimport { makeStyles } from '@material-ui/core/styles'\nimport Button from '@material-ui/core/Button'\nimport { grey } from '@material-ui/core/colors'\n\nconst normal = grey[100]\n\nconst useStyles = makeStyles(theme => ({\n  button: {\n    margin: theme.spacing(1),\n    width: '145px',\n    color: normal,\n    borderColor: normal,\n    '&:hover': {\n      borderColor: grey[200],\n      backgroundColor: 'rgba(140, 146, 181, 0.08)',\n    },\n  },\n  input: {\n    display: 'none',\n  },\n}))\n\nexport default p => {\n  const classes = useStyles()\n  return <Button variant=\"outlined\" color=\"primary\" className={classes.button} onClick={p.onClick}>{p.children}</Button>\n}\n","import React from 'react'\nimport Button from './button'\n\nexport default p => {\n  const onClick = () => {\n    if (p.onClick) p.onClick()\n  }\n  return (\n    <Button onClick={onClick}>{p.mounted ? 'Unmount' : 'Mount'}</Button>\n  )\n}\n","/** @jsx jsx */\nimport { Global, jsx, css } from '@emotion/core'\nimport { useState } from 'react'\nimport Pico8 from 'react-pico-8'\nimport * as picoButtons from 'react-pico-8/buttons'\nimport CodeBlock from './code-block'\nimport codeDemo from './code'\nimport List from './drag-list'\nimport Box from './checkbox'\nimport Button from './mount-button'\nimport { ChameleonThemeColor } from 'react-chameleon-theme-color'\n\nconst Checkbox = p => {\n  const span = css`\n    padding: 3px;\n  `\n  return (\n    <div css={span}>\n      <Box id={p.name} disabled={p.disabled} checked={p.checked} onChange={p.onChange} />\n      <label htmlFor={p.name}>{p.children}</label>\n    </div>\n  )\n}\n\nconst Option = p => {\n  const style = css`\n    color: #fff;\n    margin-left: 5px;\n  `\n  return (\n    <Checkbox name={p.name} disabled={p.disabled} checked={p.checked} onChange={p.onChange}>\n      <strong>{p.name}</strong>\n      <span css={style}>- {p.children}</span>\n    </Checkbox>\n  )\n}\n\nconst App = () => {\n  const font = css`\n    @import url('https://fonts.googleapis.com/css?family=Inconsolata:400,700|Lato:400,700');\n    * {\n      font-family: 'Lato', sans-serif;\n    }\n    body {\n      background: #222;\n      margin: 0;\n    }\n  `\n  const desc = css`\n    margin: 0 auto;\n    padding: 35px;\n    color: #FFF;\n    max-width: 1000px;\n    fieldset {\n      border: none;\n    }\n    legend {\n      display: block;\n      font-size: 1.5em;\n      font-weight: bold;\n      margin: 0 0 5px 0;\n    }\n    h2 {\n      margin-top: 0;\n    }\n  `\n  const page = css`\n    margin-top: 75px;\n  `\n  const form = css`\n    margin-top: 20px;\n  `\n  const link = css`\n    a {\n      text-decoration: none;\n      color: #FFF;\n    }\n    a:hover {\n      opacity: 0.5;\n    }\n  `\n  const heading = css`\n    margin-bottom: 20px;\n    a {\n      margin-right: 10px;\n    }\n    h1 {\n      display: inline;\n    }\n    img {\n      image-rendering: pixelated;\n    }\n  `\n  const live = css`\n    display: flex;\n    justify-content: space-between;\n    flex-wrap: wrap;\n  `\n  const list = css`\n    flex: 0 400px;\n  `\n\n  const usage = css`\n    flex: 0 600px;\n  `\n  const order = [\n    'Controls',\n    'Reset',\n    'Pause',\n    'Sound',\n    'Carts',\n    'Fullscreen'\n  ]\n  const [autoPlay, setAutoPlay] = useState(true)\n  const [legacyButtons, setLegacyButtons] = useState(false)\n  const [hideCursor, setHideCursor] = useState(false)\n  const [center, setCenter] = useState(true)\n  const [blockKeys, setBlockKeys] = useState(false)\n  const [isMounted, setMounted] = useState(true)\n  const [usePointer, setPointer] = useState(true)\n  const [unpauseOnReset, setUnpauseOnReset] = useState(true)\n  const [buttons, setButtons] = useState(order.map(name => ({\n    name,\n    Button: picoButtons[name],\n    enabled: name !== 'Reset' && name !== 'Carts'\n  })))\n  const props = {\n    autoPlay,\n    legacyButtons,\n    hideCursor,\n    center,\n    blockKeys,\n    usePointer,\n    unpauseOnReset\n  }\n  return (\n    <div>\n      <ChameleonThemeColor />\n      <div css={page}>\n        <Global styles={font} />\n        { isMounted ?\n          <Pico8 src=\"index.js\" placeholder=\"placeholder.png\" {...props}>\n            {buttons.filter(({enabled}) => enabled).map(({ name, Button }) => <Button key={name}/>)}\n          </Pico8> : null }\n        <div css={desc}>\n          <span css={[heading, link]}>\n            <h1>\n              <a href=\"https://github.com/woofers/react-pico-8\">react-pico-8</a>\n            </h1>\n            <img width=\"32px\" height=\"32px\" src=\"pico.png\" alt=\"PICO-8 Logo\" />\n          </span>\n          <form css={form}>\n            <fieldset>\n              <legend>Props</legend>\n              <Option name=\"autoPlay\" checked={autoPlay} onChange={() => setAutoPlay(!autoPlay)}>\n                Indicates if the game canvas should attempt to auto-play on page-load.\n              </Option>\n              <Option name=\"legacyButtons\" disabled={!isMounted} checked={legacyButtons} onChange={() => setLegacyButtons(!legacyButtons)}>\n                Used to select the type of buttons.\n              </Option>\n              <Option name=\"hideCursor\" disabled={!isMounted} checked={hideCursor} onChange={() => setHideCursor(!hideCursor)}>\n                Indicates if the cursor is hidden over the game canvas when the game is playing.\n              </Option>\n              <Option name=\"center\" disabled={!isMounted} checked={center} onChange={() => setCenter(!center)}>\n                Indicates if the game is centred outside of fullscreen mode.\n              </Option>\n              <Option name=\"blockKeys\" disabled={!isMounted} checked={blockKeys} onChange={() => setBlockKeys(!blockKeys)}>\n                If set keys which are used to interact with the game are blocked from scrolling when the game is running.  If un-set keys will only be blocked when the canvas is focused.\n              </Option>\n              <Option name=\"usePointer\" disabled={!isMounted} checked={usePointer} onChange={() => setPointer(!usePointer)}>\n                If set the pointer hand will be used on buttons.  If un-set a normal cursor will be used on all buttons which do not lead to a new page.\n              </Option>\n              <Option name=\"unpauseOnReset\" disabled={!isMounted} checked={unpauseOnReset} onChange={() => setUnpauseOnReset(!unpauseOnReset)}>\n                If set hitting the reset button when paused will instantly reset the game.  Otherwise the game will need to be resumed before it resets.\n              </Option>\n            </fieldset>\n            <fieldset>\n              <legend>State</legend>\n              <Button mounted={isMounted} onClick={() => setMounted(!isMounted)}/>\n            </fieldset>\n          </form>\n          <div css={live}>\n            <div css={list}>\n              <List disabled={!isMounted} items={buttons} setItems={setButtons}>Buttons</List>\n            </div>\n            <div css={usage}>\n              <h2>Usage</h2>\n              <CodeBlock language=\"jsx\">{codeDemo(...Object.values(props), buttons)}</CodeBlock>\n              <p>Simply add the game widget to the React application using JSX.</p>\n              <p css={link}>\n                Be sure to include the <code>.js</code> <code>src</code> of\n                the game cartridge generated from <a href=\"https://lexaloffle.com/pico-8.php\">PICO-8</a>'s web export.\n              </p>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './app'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}